<Application x:Class="Travox.Sentinel.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" Startup="App_Startup">
    <Application.Resources>
        <!--Color Status in PanelInitialize-->
        <SolidColorBrush x:Key="TextOnline" Color="#FF55A668" />
        <SolidColorBrush x:Key="TextOffline" Color="#FFA65555" />
        <!--Color Status in PanelInitialize-->
        
        <Image x:Key="NotifyOnStart" Source="Images/icon/Notify-16-Green.png" />
        <Image x:Key="NotifyOnStop" Source="Images/icon/Notify-16-Red.png" />
        <SolidColorBrush x:Key="TextNormal" Color="#FF2C2C2C"/>
        
        <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>
        <Style x:Key="TravoxGroupBox" TargetType="{x:Type GroupBox}">
            <Setter Property="BorderBrush" Value="#D5DFE5"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type GroupBox}">
                        <Grid SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="6"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="6"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                                <RowDefinition Height="6"/>
                            </Grid.RowDefinitions>
                            <Border BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="4" Grid.Column="0" CornerRadius="0" Grid.Row="1" Grid.RowSpan="3"/>
                            <Border BorderBrush="White" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="4" CornerRadius="0" Grid.Row="1" Grid.RowSpan="3">
                                <Border.OpacityMask>
                                    <MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
                                        <Binding ElementName="Header" Path="ActualWidth"/>
                                        <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                        <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                    </MultiBinding>
                                </Border.OpacityMask>
                                <Border BorderBrush="#FF999999" BorderThickness="1" CornerRadius="0">
                                    <Border BorderBrush="White" BorderThickness="1" CornerRadius="0"/>
                                </Border>
                            </Border>
                            <Border x:Name="Header" Grid.Column="1" Padding="4,1,2,0" Grid.Row="0" Grid.RowSpan="2">
                                <ContentPresenter ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Border>
                            <ContentPresenter Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <SolidColorBrush x:Key="ProgressBar.Progress" Color="#FF06B025"/>
        <SolidColorBrush x:Key="ProgressBar.Background" Color="#FFE6E6E6"/>
        <SolidColorBrush x:Key="ProgressBar.Border" Color="#FFBCBCBC"/>
        <Style x:Key="TravoxProgressBar" TargetType="{x:Type ProgressBar}">
        	<Setter Property="Foreground" Value="{StaticResource ProgressBar.Progress}"/>
        	<Setter Property="Background" Value="{StaticResource ProgressBar.Background}"/>
        	<Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type ProgressBar}">
        				<Grid x:Name="TemplateRoot">
        					<VisualStateManager.VisualStateGroups>
        						<VisualStateGroup x:Name="CommonStates">
        							<VisualState x:Name="Determinate"/>
        							<VisualState x:Name="Indeterminate">
        								<Storyboard RepeatBehavior="Forever">
        									<DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)" Storyboard.TargetName="Animation">
        										<EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
        										<EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
        										<EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
        									</DoubleAnimationUsingKeyFrames>
        									<PointAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)" Storyboard.TargetName="Animation">
        										<EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
        										<EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
        										<EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
        									</PointAnimationUsingKeyFrames>
        								</Storyboard>
        							</VisualState>
        						</VisualStateGroup>
        					</VisualStateManager.VisualStateGroups>
        					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}"/>
        					<Rectangle x:Name="PART_Track"/>
        					<Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
        						<Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}"/>
        						<Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0.5">
        							<Rectangle.RenderTransform>
        								<TransformGroup>
        									<ScaleTransform/>
        									<SkewTransform/>
        									<RotateTransform/>
        									<TranslateTransform/>
        								</TransformGroup>
        							</Rectangle.RenderTransform>
        						</Rectangle>
        					</Grid>
        				</Grid>
        				<ControlTemplate.Triggers>
        					<Trigger Property="Orientation" Value="Vertical">
        						<Setter Property="LayoutTransform" TargetName="TemplateRoot">
        							<Setter.Value>
        								<RotateTransform Angle="-90"/>
        							</Setter.Value>
        						</Setter>
        					</Trigger>
        					<Trigger Property="IsIndeterminate" Value="true">
        						<Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <SolidColorBrush x:Key="TextBox.Static.Border" Color="#FFABAdB3"/>
        <SolidColorBrush x:Key="TextBox.MouseOver.Border" Color="#FF7EB4EA"/>
        <SolidColorBrush x:Key="TextBox.Focus.Border" Color="#FF06B025"/>
        <Style x:Key="TravoxTextBox" TargetType="{x:Type TextBox}">
        	<Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        	<Setter Property="BorderBrush" Value="{StaticResource TextBox.Static.Border}"/>
        	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        	<Setter Property="HorizontalContentAlignment" Value="Left"/>
        	<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        	<Setter Property="AllowDrop" Value="true"/>
        	<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        	<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type TextBox}">
        				<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
        					<ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
        				</Border>
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Opacity" TargetName="border" Value="0.56"/>
        					</Trigger>
        					<Trigger Property="IsMouseOver" Value="true">
        						<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.MouseOver.Border}"/>
        					</Trigger>
        					<Trigger Property="IsKeyboardFocused" Value="true">
        						<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource TextBox.Focus.Border}"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        	<Style.Triggers>
        		<MultiTrigger>
        			<MultiTrigger.Conditions>
        				<Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
        				<Condition Property="IsSelectionActive" Value="false"/>
        			</MultiTrigger.Conditions>
        			<Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
        		</MultiTrigger>
        	</Style.Triggers>
        </Style>
        <Style x:Key="FocusVisual">
        	<Setter Property="Control.Template">
        		<Setter.Value>
        			<ControlTemplate>
        				<Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        
        <Style x:Key="btnBrowsefile" TargetType="{x:Type Button}">
        	<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        	<Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        	<Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        	<Setter Property="BorderThickness" Value="1"/>
        	<Setter Property="HorizontalContentAlignment" Value="Center"/>
        	<Setter Property="VerticalContentAlignment" Value="Center"/>
        	<Setter Property="Padding" Value="1"/>
        	<Setter Property="Template">
        		<Setter.Value>
        			<ControlTemplate TargetType="{x:Type Button}">
        				<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
        					<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        				</Border>
        				<ControlTemplate.Triggers>
        					<Trigger Property="IsDefaulted" Value="true">
        						<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
        					</Trigger>
        					<Trigger Property="IsMouseOver" Value="true">
        						<Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
        						<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
        					</Trigger>
        					<Trigger Property="IsPressed" Value="true">
        						<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
        						<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
        					</Trigger>
        					<Trigger Property="IsDefault" Value="False"/>
        					<Trigger Property="IsEnabled" Value="false">
        						<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
        						<Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
        						<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
        					</Trigger>
        				</ControlTemplate.Triggers>
        			</ControlTemplate>
        		</Setter.Value>
        	</Setter>
        </Style>
        
        <ImageBrush x:Key="ClientStop" ImageSource="Images/icon/Client-Stop.png" AlignmentX="Left" Stretch="None"/>
        <ImageBrush x:Key="ClientStart" ImageSource="Images/icon/Client-Start.png" AlignmentX="Left" Stretch="None"/>
        <ImageBrush x:Key="ClientWait" ImageSource="Images/icon/Client-Wait.png" AlignmentX="Left" Stretch="None"/>
        <ImageBrush x:Key="ClientDisable" ImageSource="Images/icon/Client-Disable.png" AlignmentX="Left" Stretch="None"/>

        <Style x:Key="btnServerRestart" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource ClientStop}"/>
            <Setter Property="BorderBrush" Value="{StaticResource TextNormal}"/>
            <Setter Property="Foreground" Value="{StaticResource TextNormal}"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderThickness="0" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="Left" Margin="22,4,1,5" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource ClientDisable}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource ClientWait}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="txtLog" TargetType="{x:Type TextBox}">
            <Setter Property="Background" Value="#FFFEFEFE"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Foreground" Value="#FF2E2E2E"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type TextBox}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden" Padding="6,2,2,2"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Opacity" TargetName="border" Value="0"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                        <Condition Property="IsSelectionActive" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
                </MultiTrigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="btnMenuContext" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="{x:Null}"/>
            <Setter Property="BorderBrush" Value="#FF707070"/>
            <Setter Property="Foreground" Value="#FF303030"/>
            <Setter Property="BorderThickness" Value="0,0,0,2"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="#FF55A668"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="btnContextNormal" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="#FFECECEC"/>
            <Setter Property="BorderBrush" Value="{x:Null}"/>
            <Setter Property="Foreground" Value="#FF343434"/>
            <Setter Property="BorderThickness" Value="0"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Padding" Value="1,5"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#FFDCDCDC"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Application.Resources>
</Application>
